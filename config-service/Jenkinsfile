pipeline {
    agent any
    //Use Pipeline Utility Steps plugin to read information from pom.xml into env variables
    environment { 
        imagename = "florent/config-service" // Nom du container docker
        registryCredential = 'DockerHub_Pipeline_Credentials'
        dockerImage = ''
    }
    // using the Timestamper plugin we can add timestamps to the console log
    options {
        timestamps()
    }
    stages {
        stage('Clone Repository') {
            steps {
                script {
                    git 
                    url: 'https://github.com/kemflorent/msa-jenkins-pipeline.git',
                    branch: 'main',
                    credentialsId: 'Pipeline_GitHub_Credentials'
                }
            }
        }
        stage("Build JAR") {
            steps {
                dir ('config-service') {
                    sh 'mvn -B clean package'
                }
            }
        }
        stage("Build Docker Image") {
            steps {
                dir ('config-service') {
                    script { 
                        dockerImage = docker.build imagename + ":$BUILD_NUMBER" 
                    }
                }
            }
        }
        stage("Push Docker Image") {
            steps {
                dir ('config-service') {
                    script { 
                        docker.withRegistry( '', registryCredential ) { 
                            dockerImage.push() 
                        }
                    }
                }
            }
        }
        stage("Run Docker Image") {
            steps {
                script { 
                    docker.image(imagename + ":$BUILD_NUMBER")
                          .run('-p 8888:8888 --name config')
                }
            }
        }
        stage('Cleaning up') { 
            steps { 
                echo 'Removing unused docker containers and images..'
                sh 'docker ps -aq | xargs --no-run-if-empty docker rm'
                // keep intermediate images as cache, only delete the final image
                sh 'docker images -q | xargs --no-run-if-empty docker rmi'
            }
        } 
        stage ('Final') {
            steps {
                // script {
                    build job: 'discovery-service-pipeline', wait: false
                // }
            }
        }

        // stage("Testing") {
        //     parallel {
        //         stage("Unit Tests") {
        //             agent { docker 'openjdk:7-jdk-alpine' }
        //             steps {
        //                 sh 'java -version'
        //             }
        //         }
        //         stage("Functional Tests") {
        //             agent { docker 'openjdk:8-jdk-alpine' }
        //             steps {
        //                 sh 'java -version'
        //             }
        //         }
        //         stage("Integration Tests") {
        //             steps {
        //                 sh 'java -version'
        //             }
        //         }
        //     }
        // }  
    }
}